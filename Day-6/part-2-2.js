// const rawMapData

const rawMapData = ["....#.....", ".........#", "..........", "..#.......", ".......#..", "..........", ".#..^.....", "........#.", "#.........", "......#..."];

const mapData = rawMapData.map((element) => {
    return element.split("");
});

function horizontalBuffers(table) {
    table.forEach((element) => {
        element.push("O");
        element.unshift("O");
    });
}

function verticalBuffers(table) {
    const row = [];
    for (let index = 0; index < table[0].length; index += 1) {
        row.push("O");
    }
    table.unshift(row);
    table.push(row);
}
horizontalBuffers(mapData);
verticalBuffers(mapData);

let startX = 0;
mapData.forEach((row) => {
    if (row.includes("^")) {
        startX = row.findIndex((element) => element === "^");
    }
});
const startY = mapData.findIndex((row) => {
    return row.includes("^");
});

let active = true;
let counter = 0;

// Pseudocode - Start with loop check only first

//// Loop check logic
// 1. Place a blocker one tile ahead of current direction, but not if a tile ahead is an edge or turn tile
// 2. record current X/Y position depending on direction
// 3. immediately turn
// 4. Any time it hits the outer edge ("O"), loop is false - Check before every movement
// 5. If it hits a turn block, turn
// 6. if it hits a second turn block, turn
// 7. If it hits a third turn block and it is not on the same X/Y tile as the starting point, loop is false
// 8. If it hits a third turn block and it is on the same X/Y tile as the starting point, turn
// 9. If it hits a turn block before the same X/Y position as the starting point, loop is false
// 10. Else loop is true

// If the next is block is an A, return true;

// After a turn and before moving again, a blocker cannot be placed (so you don't go back the same way you just came from)

function removeA(mapData) {
    mapData.map((rows) => {
        rows.map((rowItem) => {
            if (rowItem === "A") {
                rowItem === ".";
            }
            return rowItem;
        });
    });
}

const directions = ["up", "right", "down", "left"];

function startLoopCheck(map, startY, startX, dIndex) {
    const tempMap = map.map((element) => element);
    if (!turnCheck(map, startY, startX, directions[dIndex])) {
        // placeBlocker(tempMap, startY, startX, directions[dIndex]);
        const blockerCoords = placeBlocker(tempMap, startY, startX, directions[dIndex]);

        const startCoordinates = recordCoordinates(startY, startX);
        return recursiveMove(tempMap, startY, startX, newDirections(dIndex), startCoordinates, 1, blockerCoords); /// If it is true, it is a loop
    }
}
// console.log(startLoopCheck(tempMap, startY, startX, 3));

function recursiveMove(map, cIndex, rIndex, dIndex, startCoords, iteration, blockerCoords) {
    console.log(`Recursive [${cIndex},${rIndex}]`);
    // if you hit the end on the next loop of a move
    // - If the tile is the same as the startcoords, return true
    // - Else return false if any other condition is not met

    // const tempDIndex = turnCheck(map, cIndex, rIndex, directions[dIndex]) ? newDirections(dIndex) : dIndex;
    let tempDIndex = dIndex;
    let currentIteration = iteration;

    if (iteration === 5) {
        return false;
    }
    if (turnCheck(map, cIndex, rIndex, directions[dIndex])) {
        tempDIndex = newDirections(dIndex);
        currentIteration++;
    }

    // if (blockerCheck(map, cIndex, rIndex, directions[dIndex])) {
    //     return true;
    // }
    if (blockerCheck(cIndex, rIndex, directions[dIndex], blockerCoords)) {
        return true;
    }

    if (edgeCheck(map, cIndex, rIndex, directions[dIndex])) {
        return false;
    }
    if (iteration === 3) {
        if (turnCheck(map, cIndex, rIndex, directions[dIndex]) && !thirdIterationCheck(cIndex, rIndex, directions[dIndex], startCoords)) {
            return false;
        }
    }
    if (iteration === 4) {
        if (turnCheck(map, cIndex, rIndex, directions[dIndex]) && fourthIterationCheck(cIndex, rIndex, directions[dIndex], startCoords)) {
            return false;
        }
    }

    let nextCoords = newCoordinates(cIndex, rIndex, directions[tempDIndex]);

    return recursiveMove(map, nextCoords[0], nextCoords[1], tempDIndex, startCoords, currentIteration, blockerCoords);
}

function blockerCheck(cIndex, rIndex, direction, blockerCoords) {
    console.log(cIndex, rIndex, direction, blockerCoords);

    if (direction === "up" && cIndex - 1 === blockerCoords[0] && rIndex === blockerCoords[1]) {
        return true;
    } else if (direction === "right" && cIndex === blockerCoords[0] && rIndex + 1 === blockerCoords[1]) {
        return true;
    } else if (direction === "down" && cIndex + 1 === blockerCoords[0] && rIndex === blockerCoords[1]) {
        return true;
    } else if (direction === "left" && cIndex === blockerCoords[0] && rIndex - 1 === blockerCoords[1]) {
        return true;
    }
    return false;
}

function edgeCheck(map, cIndex, rIndex, direction) {
    if (direction === "up" && map[cIndex - 1][rIndex] === "O") {
        return true;
    } else if (direction === "right" && map[cIndex][rIndex + 1] === "O") {
        return true;
    } else if (direction === "down" && map[cIndex + 1][rIndex] === "O") {
        return true;
    } else if (direction === "left" && map[cIndex][rIndex - 1] === "O") {
        return true;
    }
    return false;
}

function thirdIterationCheck(cIndex, rIndex, direction, startCoords) {
    if ((direction === "up" || direction === "down") && cIndex !== startCoords[0]) {
        return false;
    } else if ((direction === "left" || direction === "right") && rIndex !== startCoords[1]) {
        return false;
    }
    return true;
}

function fourthIterationCheck(cIndex, rIndex, direction, startCoords) {
    if ((direction === "up" || direction === "down") && rIndex !== startCoords[1]) {
        return false;
    } else if ((direction === "left" || direction === "right") && cIndex !== startCoords[0]) {
        return false;
    }
    return true;
}

function move(map, cIndex, rIndex, direction) {
    if (direction === "right") {
        map[cIndex][rIndex + 1] = "^";
        map[cIndex][rIndex] = ".";
    }
    if (direction === "left") {
        map[cIndex][rIndex - 1] = "^";
        map[cIndex][rIndex] = ".";
    }
    if (direction === "up") {
        map[cIndex - 1][rIndex] = "^";
        map[cIndex][rIndex] = ".";
    }
    if (direction === "down") {
        map[cIndex + 1][rIndex] = "^";
        map[cIndex][rIndex] = ".";
    }
    return true;
}

function newDirections(dIndex) {
    return dIndex === 3 ? 0 : dIndex + 1;
}

function newCoordinates(cIndex, rIndex, direction) {
    if (direction === "up") {
        return [cIndex - 1, rIndex];
    } else if (direction === "right") {
        return [cIndex, rIndex + 1];
    } else if (direction === "down") {
        return [cIndex + 1, rIndex];
    } else if (direction === "left") {
        return [cIndex, rIndex - 1];
    }
}

function turnCheck(map, cIndex, rIndex, direction) {
    if (direction === "up" && map[cIndex - 1][rIndex] === "#") {
        return true;
    } else if (direction === "right" && map[cIndex][rIndex + 1] === "#") {
        return true;
    } else if (direction === "down" && map[cIndex + 1][rIndex] === "#") {
        return true;
    } else if (direction === "left" && map[cIndex][rIndex - 1] === "#") {
        return true;
    }
    return false;
}

function placeBlocker(map, cIndex, rIndex, direction) {
    if (direction === "up") {
        // map[cIndex - 1][rIndex] = "A";
        return [cIndex - 1, rIndex];
    } else if (direction === "right") {
        // map[cIndex][rIndex + 1] = "A";
        return [cIndex, rIndex + 1];
    } else if (direction === "down") {
        // map[cIndex + 1][rIndex] = "A";
        return [cIndex + 1, rIndex];
    } else if (direction === "left") {
        // map[cIndex][rIndex - 1] = "A";
        return [cIndex, rIndex - 1];
    }
}

// function blockerCheck(map, cIndex, rIndex, direction) {
//     if (direction === "up" && map[cIndex - 1][rIndex] === "A") {
//         return true;
//     } else if (direction === "right" && map[cIndex][rIndex + 1] === "A") {
//         return true;
//     } else if (direction === "down" && map[cIndex + 1][rIndex] === "A") {
//         return true;
//     } else if (direction === "left" && map[cIndex][rIndex - 1] === "A") {
//         return true;
//     }
//     return false;
// }

function recordCoordinates(cIndex, rIndex) {
    return [cIndex, rIndex];
}

let shouldLoop = true;

function move(map, cIndex, rIndex, dIndex) {
    console.log(`Normal move: ${[cIndex, rIndex, directions[dIndex]]}`);
    removeA(map);
    if (edgeCheck(map, cIndex, rIndex, directions[dIndex])) {
        active = false;
        return false;
    }
    if (shouldLoop) {
        if (startLoopCheck(map, cIndex, rIndex, dIndex)) {
            console.log("Loop here!");
            counter++;
            shouldLoop = false;
            console.log(counter);
        }
    }

    let tempDIndex = dIndex;

    if (turnCheck(map, cIndex, rIndex, directions[dIndex])) {
        tempDIndex = newDirections(dIndex);
        shouldLoop = true;
    }

    let nextCoords = newCoordinates(cIndex, rIndex, directions[tempDIndex]);

    return move(map, nextCoords[0], nextCoords[1], tempDIndex);
}

move(mapData, startY, startX, 0);

console.log(counter);

///// Issue right now is option 5 of the tests. 
///// I misunderstood the exercise. As long as it hits the original spot, it can loop as many times as it wants
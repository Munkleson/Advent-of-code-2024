// const rawMapData

const rawMapData = ["....#.....", "....^....#", "..........", "..#.......", ".......#..", "..........", ".#........", "........#.", "#.........", "......#..."];

const mapData = rawMapData.map((element) => {
    return element.split("");
});

console.log(mapData.length);

function horizontalBuffers(table) {
    const length = table.length;
    table.forEach((element) => {
        element.push("O");
        element.unshift("O");
    });
}

function verticalBuffers(table) {
    const row = [];
    for (let index = 0; index < table[0].length; index += 1) {
        row.push("O");
    }
    table.unshift(row);
    table.push(row);
}
horizontalBuffers(mapData);
verticalBuffers(mapData);

let active = true;

// function move(table, cIndex, rIndex, direction) {
//     // +1 for down and right, -1 for up and left
//     if (direction === "right") {
//         table[cIndex][rIndex + 1] = "^";
//         table[cIndex][rIndex] = "X";
//     }
//     if (direction === "left") {
//         table[cIndex][rIndex - 1] = "^";
//         table[cIndex][rIndex] = "X";
//     }
//     if (direction === "up") {
//         table[cIndex - 1][rIndex] = "^";
//         table[cIndex][rIndex] = "X";
//     }
//     if (direction === "down") {
//         table[cIndex + 1][rIndex] = "^";
//         table[cIndex][rIndex] = "X";
//     }
//     return true;
// }

function canMove(table, cIndex, rIndex, direction) {
    if (direction === "right") {
        if (table[cIndex][rIndex + 1] === "O") {
            active = false;
            return false;
        }
        if (table[cIndex][rIndex + 1] === "#") {
            return false;
        }
    }
    if (direction === "left") {
        if (table[cIndex][rIndex - 1] === "O") {
            active = false;
            return false;
        }
        if (table[cIndex][rIndex - 1] === "#") {
            return false;
        }
    }
    if (direction === "up") {
        // console.log(table[cIndex - 1][rIndex] === "O");
        if (table[cIndex - 1][rIndex] === "O") {
            active = false;
            return false;
        }
        if (table[cIndex - 1][rIndex] === "#") {
            return false;
        }
    }
    if (direction === "down") {
        if (table[cIndex + 1][rIndex] === "O") {
            active = false;
            return false;
        }
        if (table[cIndex + 1][rIndex] === "#") {
            return false;
        }
    }
    return true;
}

function newCoordinates(cIndex, rIndex, direction) {
    if (direction === "right") {
        return [0, 1];
    }
    if (direction === "left") {
        return [0, -1];
    }
    if (direction === "up") {
        return [-1, 0];
    }
    if (direction === "down") {
        return [1, 0];
    }
    return true;
}

let count = 0;

// function counter(table) {
//     table.forEach((column) => {
//         column.forEach((rowItem) => {
//             count += rowItem === "X" && 1;
//         });
//     });
// }

const directions = ["up", "right", "down", "left"];
function directionCheck(directionIndex) {
    if (directionIndex === 0) {
        return directions[3];
    }
    return directions[directionIndex - 1];
}

function start() {
    let rowIndex = 0;
    mapData.forEach((row) => {
        if (row.includes("^")) {
            rowIndex = row.findIndex((element) => element === "^");
        }
    });
    const columnIndex = mapData.findIndex((row) => {
        return row.includes("^");
    });
    function recursiveLoop(table, cIndex, rIndex, directionIndex) {
        if (!active) {
            return false;
        }

        let c = cIndex;
        let r = rIndex;

        let stopLooping = false;
        while (canMove(table, c, r, directions[directionIndex])) {
            if (!stopLooping) {
                const loopResults = loopCheckStart();
                if (loopResults.loopTrue) {
                    counter++;
                    stopLooping = true;
                }
            }
            move(table, c, r, directions[directionIndex]);
            const newCoords = newCoordinates(cIndex, rIndex, directions[directionIndex]);
            c += newCoords[0];
            r += newCoords[1];
        }

        let newDirection = 0;
        if (directionIndex === 3) {
            newDirection = 0;
        } else {
            newDirection = directionIndex + 1;
        }
        return recursiveLoop(table, c, r, newDirection);
    }
    recursiveLoop(mapData, columnIndex, rowIndex, 0);
}

function loopCheck(table, cIndex, rIndex, directionIndex) {
    if (!active) {
        return false;
    }

    let c = cIndex;
    let r = rIndex;

    while (canMove(table, c, r, directions[directionIndex])) {
        move(table, c, r, directions[directionIndex]);
        const newCoords = newCoordinates(cIndex, rIndex, directions[directionIndex]);
        c += newCoords[0];
        r += newCoords[1];
    }

    let newDirection = 0;
    if (directionIndex === 3) {
        newDirection = 0;
    } else {
        newDirection = directionIndex + 1;
    }
    return recursiveLoop(table, c, r, newDirection);
}

start();
console.log(mapData);

///// if moving left, if column index when stopped is more than starting column index, it is false
///// if moving right, if column index when stopped is less than starting column index, it is false
///// if moving up, if row index when stopped is less than starting row index, it is false
///// if moving down, if row index when stopped is more than starting row index, it is false
///// check for moving direction if current direction =
///// check for starting position
///// start loop check from 1 move after turning
///// if it hits a blocker after the second or third turn before reaching the x/y of the starting position

// check for a loop EVERY SINGLE STEP
//// record starting index (single step)
// chuck a blocker 2 indexes in front of the direction and see if it will reach the index + 1 at the end of the loop
// record location in array with direction
// if it successfully creates a loop, until it turns again from its original direction, do not check for loop

function loopCheckStart(cIndex, rIndex, dindex) {
    const startX = cIndex;
    const startY = rIndex;
    const currentDirection = dindex;
    let loopActive = true;
    let loopTrue = false;

    const tempMap = mapData.map((element) => element);
    // outerEdgeCheck(cIndex, rIndex, directions[dindex], loopActive, tempMap);
    recursiveLoopCheck(0, tempMap, cIndex, rIndex, dIndex + 1, loopActive, loopTrue);
    return { loopTrue: loopTrue, startX: startX, startY: startY };
}

function recursiveLoopCheck(iteration, map, cIndex, rIndex, dIndex, loopActive, loopTrue) {
    if (iteration === 4 || !loopActive) {
        return;
    }
    let c = cIndex;
    let r = rIndex;
    while (moveable(map, cIndex, rIndex, dIndex, loopActive, loopTrue)) {
        move(map, cIndex, rIndex, dIndex);
        const newCoords = newCoordinates(cIndex, rIndex, directions[dIndex]);
        c += newCoords[0];
        r += newCoords[1];
    }

    const d = directionChange(dindex);
    return recursiveLoopCheck(iteration + 1, c, r, d, loopActive, loopTrue);
}

function move(map, cIndex, rIndex, direction) {
    // +1 for down and right, -1 for up and left
    if (direction === "right") {
        map[cIndex][rIndex + 1] = "^";
        map[cIndex][rIndex] = ".";
    }
    if (direction === "left") {
        map[cIndex][rIndex - 1] = "^";
        map[cIndex][rIndex] = ".";
    }
    if (direction === "up") {
        map[cIndex - 1][rIndex] = "^";
        map[cIndex][rIndex] = ".";
    }
    if (direction === "down") {
        map[cIndex + 1][rIndex] = "^";
        map[cIndex][rIndex] = ".";
    }
}

function moveable() {
    if (blockerCheck() || outerEdgeCheck() || turnCheck()) {
        return false;
    }

    return true;
}

// if blockercheck is true, increase the counter
//// record the location and direction

function outerEdgeCheck(cIndex, rIndex, direction, active, map) {
    if (direction === "right") {
        if (map[cIndex][rIndex + 1] === "O") {
            active = false;
            return true;
        }
    }
    if (direction === "left") {
        if (map[cIndex][rIndex - 1] === "O") {
            active = false;
            return true;
        }
    }
    if (direction === "up") {
        if (map[cIndex - 1][rIndex] === "O") {
            active = false;
            return true;
        }
    }
    if (direction === "down") {
        if (map[cIndex + 1][rIndex] === "O") {
            active = false;
            return true;
        }
    }
    return false;
}

function turnCheck(cIndex, rIndex, direction, map) {
    if (direction === "right") {
        if (map[cIndex][rIndex + 1] === "#") {
            return true;
        }
    }
    if (direction === "left") {
        if (map[cIndex][rIndex - 1] === "#") {
            return true;
        }
    }
    if (direction === "up") {
        if (map[cIndex - 1][rIndex] === "#") {
            return true;
        }
    }
    if (direction === "down") {
        if (map[cIndex + 1][rIndex] === "#") {
            return true;
        }
    }
    return false;
}

function blockerCheck(cIndex, rIndex, direction, map, loopTrue) {
    if (direction === "right") {
        if (map[cIndex][rIndex + 1] === "A") {
            loopTrue = true;
            return true;
        }
    }
    if (direction === "left") {
        if (map[cIndex][rIndex - 1] === "A") {
            loopTrue = true;
            return true;
        }
    }
    if (direction === "up") {
        if (map[cIndex - 1][rIndex] === "A") {
            loopTrue = true;
            return true;
        }
    }
    if (direction === "down") {
        if (map[cIndex + 1][rIndex] === "A") {
            loopTrue = true;
            return true;
        }
    }
    return false;
}

function placeBlocker() {}

function directionChange(dIndex) {
    return dIndex === 3 ? 0 : dIndex + 1;
}

console.log(count);
